# -*- coding: utf-8 -*-
"""irc_server.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1slO9f6uDSO7uWDkkecLTjtR4V_lwcSIs
"""

from main import *

#now to instatiate
class User:
    def __init__(self, name):
        self.name = name
        self.room_details = []
        self.current_room = ''


class ChatRoom:
    def __init__(self, name):
        self.peoples = []
        self.nick_names = []
        self.name = name


def list_all_room_details(nick_name):
    name = users[nick_name]
    print(len(room_details))
    if len(room_details) == 0:
        name.send('No roomdetails are available to join'.encode('utf-8'))
    else:
        reply = "List of available room details: \n"
        for room in room_details:
            print(room_details[room].name)
            reply += room_details[room].name
            print(room_details[room].nick_names)

            #if nick_name not in room_details[room].nick_names:
            for people in room_details[room].nick_names:
                reply += people + '\n'
        name.send(f'{reply}'.encode('utf-8'))


def join_room(nick_name, room_name):
    name = users[nick_name]
    user = users_in_room[nick_name]
    if room_name not in room_details:
        room = Room(room_name)
        room_details[room_name] = room
        room.peoples.append(name)
        room.nick_names.append(nick_name)

        user.current_room = room_name
        user.room_details.append(room)
        name.send(f'{room_name} created'.encode('utf-8'))
    else:
        room = room_details[room_name]
        if room_name in user.room_details:
            name.send('You are already in the room'.encode('utf-8'))
        else:
            room.peoples.append(name)
            room.nick_names.append(nick_name)
            user.current_room = room_name
            user.room_details.append(room)
            broadcast(f'{nickname} joined the room', room_name)
            #name.send('Joined room'.encode('utf-8'))

#now to switch to other room
'''def switch_room(nickname, roomname):
    user = users_in_room[nickname]
    name = users[nickname]
    room = roomdetails[roomname]
    if roomname == user.thisRoom:
        name.send('You are already in the room'.encode('utf-8'))
    elif room not in user.roomdetails:
        name.send('Switch not available, You are not part of the room'.encode('utf-8'))
    else:
        user.thisRoom = roomname
        name.send(f'Switched to {roomname}'.encode('utf-8'))'''

def leave_room(nick_name):
    user = users_in_room[nick_name]
    name = users[nick_name]
    if user.current_room == '':
        name.send('You are not part of any room'.encode('utf-8'))
    else:
        room_name = user.current_room
        room = room_details[room_name]
        user.current_room = ''
        user.room_details.remove(room)
        room_details[room_name].peoples.remove(name)
        room_details[room_name].nick_names.remove(nick_name)
        broadcast(f'{nick_name} left the room', room_name)
        name.send('You left the room'.encode('utf-8'))


def personal_message(message):
    args = message.split(" ")
    user = args[2]
    sender = users[args[0]]
    if user not in users:
        sender.send('User not found'.encode('utf-8'))
    else:
        reciever = users[user]
        msg = ' '.join(args[3:])
        reciever.send(f'[personal message] {args[0]}: {msg}'.encode('utf-8'))
        sender.send(f'[personal message] {args[0]}: {msg}'.encode('utf-8'))

#now to exit the server
def remove_client(nick_name):
    nick_names.remove(nick_name)
    client = users[nick_name]
    user = users_in_room[nick_name]
    user.current_room = ''
    for room in user.room_details:
        print(room.name)
        room.peoples.remove(client)
        print(room.peoples)
        room.nick_names.remove(nick_name)
        print(room.nick_names)
        broadcast(f'{nick_name} left the room', room.name)


#to handle
def handle(client):
    nick=''
    while True:
        try:
            message = client.recv(1024).decode('utf-8').split(" ")
            #args = message.split(" ")
            name = users[args[0]]
            nick = args[0]
            if '$help' in message:
                name.send(instructions.encode('utf-8'))
            elif '$list' in message:
                list_all_room_details(args[0])
            elif '$join' in message:
                join_room(args[0], ' '.join(args[2:]))
            elif '$leave' in message:
                leave_room(args[0])
            elif '$personal' in message:
                personal_message(message)
            elif '$quit' in message:
                remove_client(args[0])
                name.send('QUIT'.encode('utf-8'))
                name.close()
            else:
                if users_in_room[args[0]].current_room == '':
                    name.send('You are not part of any room'.encode('utf-8'))
                else:
                    msg = ' '.join(args[1:])
                    broadcast(f'{args[0]}: {msg}',users_in_room[args[0]].current_room)

            #broadcast(message)
        except Exception as e:
            print("exception occured ", e)
            index = clients.index(client)
            clients.remove(client)
            client.close()
            '''nickname = nicknames[index]
            print(f'{nickname} left')
            user = users_in_room[nickname]'''
            '''if user.thisRoom != '':
                roomname = user.thisRoom
                user.thisRoom = ''
                #user.roomdetails.remove(roomname)
                roomdetails[roomname].peoples.remove(name)
                roomdetails[roomname].nicknames.remove(nickname)
                broadcast(f'{nickname} left the room', roomname)'''
            print(f'nick name is {nick}')
            if nick in nick_names:
                remove_client(nick)
            if nick in nick_names:
                nick_names.remove(nick)

            #broadcast(f'{nickname} left the room'.encode('utf-8'))

            break

#main
def recieve():
    while True:
        client, address = server.accept()
        print(f'connected with {str(address)}')
        print(client)
        client.send('NICK'.encode('utf-8'))
        nick_name = client.recv(1024).decode('utf-8')
        nick_names.append(nick_name)
        clients.append(client)
        user = User(nick_name)
        users_in_room[nick_name] = user
        users[nick_name] = client
        print(f'Nickname of the client is {nick_name}')
        #broadcast(f'{nickname} joined the chat'.encode('utf-8'))
        client.send('Connected to the server!'.encode('utf-8'))
        client.send(instructions.encode('utf-8'))
        thread = threading.Thread(target=handle, args=(client,))
        thread.start()

print('Server is listening...')
recieve()